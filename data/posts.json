[{"url":"https://api.github.com/repos/77Vincent/blog/issues/17","repository_url":"https://api.github.com/repos/77Vincent/blog","labels_url":"https://api.github.com/repos/77Vincent/blog/issues/17/labels{/name}","comments_url":"https://api.github.com/repos/77Vincent/blog/issues/17/comments","events_url":"https://api.github.com/repos/77Vincent/blog/issues/17/events","html_url":"https://github.com/77Vincent/blog/issues/17","id":383364540,"node_id":"MDU6SXNzdWUzODMzNjQ1NDA=","number":17,"title":"How to implement Binary Search Tree in Javascript","user":{"login":"77Vincent","id":12905966,"node_id":"MDQ6VXNlcjEyOTA1OTY2","avatar_url":"https://avatars2.githubusercontent.com/u/12905966?v=4","gravatar_id":"","url":"https://api.github.com/users/77Vincent","html_url":"https://github.com/77Vincent","followers_url":"https://api.github.com/users/77Vincent/followers","following_url":"https://api.github.com/users/77Vincent/following{/other_user}","gists_url":"https://api.github.com/users/77Vincent/gists{/gist_id}","starred_url":"https://api.github.com/users/77Vincent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/77Vincent/subscriptions","organizations_url":"https://api.github.com/users/77Vincent/orgs","repos_url":"https://api.github.com/users/77Vincent/repos","events_url":"https://api.github.com/users/77Vincent/events{/privacy}","received_events_url":"https://api.github.com/users/77Vincent/received_events","type":"User","site_admin":false},"labels":[{"id":727746124,"node_id":"MDU6TGFiZWw3Mjc3NDYxMjQ=","url":"https://api.github.com/repos/77Vincent/blog/labels/Programming","name":"Programming","color":"ed9e15","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-11-22T03:09:01Z","updated_at":"2018-11-23T09:23:58Z","closed_at":null,"author_association":"OWNER","body":"```js\r\nclass BinarySearchTree {\r\n  constructor() {\r\n    this.root = null\r\n  }\r\n\r\n  insert(data) {\r\n    const newNode = {\r\n      data,\r\n      left: null,\r\n      right: null,\r\n    }\r\n\r\n    if (this.root === null) {\r\n      this.root = newNode\r\n    } else {\r\n      this._insertNode(this.root, newNode)\r\n    }\r\n    return this\r\n  }\r\n\r\n  _insertNode(node, newNode) {\r\n    if (newNode.data < node.data) {\r\n      if (node.left === null) {\r\n        node.left = newNode\r\n      } else {\r\n        this._insertNode(node.left, newNode)\r\n      }\r\n    } else {\r\n      if (node.right === null) {\r\n        node.right = newNode\r\n      } else {\r\n        this._insertNode(node.right, newNode)\r\n      }\r\n    }\r\n  }\r\n\r\n  remove(data) {\r\n    this.root = this._removeNode(this.root, data)\r\n    return this\r\n  }\r\n\r\n  _removeNode(node, data) {\r\n    if (node === null) {\r\n      return null\r\n    } else if (data < node.data) {\r\n      node.left = this._removeNode(node.left, data)\r\n      return node\r\n    } else if (data > node.data) {\r\n      node.right = this._removeNode(node.right, data)\r\n      return node\r\n    } else {\r\n      if (node.left === null && node.right === null) {\r\n        return null\r\n      }\r\n      if (node.left === null) {\r\n        return node.right\r\n      } else if (node.right === null) {\r\n        return node.left\r\n      }\r\n      const aux = this._findMinNode(node.right)\r\n      node.data = aux.data\r\n\r\n      node.right = this._removeNode(node.right, aux.data)\r\n      return node\r\n    }\r\n  }\r\n\r\n  inOrder(node = this.root) {\r\n    if (node !== null) {\r\n      this.inOrder(node.left)\r\n      console.log(node.data)\r\n      this.inOrder(node.right)\r\n    }\r\n  }\r\n\r\n  preOrder(node = this.root) {\r\n    if (node !== null) {\r\n      console.log(node.data)\r\n      this.preOrder(node.left)\r\n      this.preOrder(node.right)\r\n    }\r\n  }\r\n\r\n  postOrder(node = this.root) {\r\n    if (node !== null) {\r\n      this.postOrder(node.left)\r\n      this.postOrder(node.right)\r\n      console.log(node.data)\r\n    }\r\n  }\r\n\r\n  search(data, node = this.root) {\r\n    if (node === null) {\r\n      return null\r\n    } else if (data < node.data) {\r\n      return this.search(node.left, data)\r\n    } else if (data > node.data) {\r\n      return this.search(node.right, data)\r\n    } else {\r\n      return node\r\n    }\r\n  }\r\n\r\n  _findMinNode(node) { \r\n    // if left of a node is null \r\n    // then it must be minimum node \r\n    if(node.left === null) {\r\n      return node\r\n    } else {\r\n      return this._findMinNode(node.left);\r\n    }\r\n  } \r\n}\r\n```"},{"url":"https://api.github.com/repos/77Vincent/blog/issues/16","repository_url":"https://api.github.com/repos/77Vincent/blog","labels_url":"https://api.github.com/repos/77Vincent/blog/issues/16/labels{/name}","comments_url":"https://api.github.com/repos/77Vincent/blog/issues/16/comments","events_url":"https://api.github.com/repos/77Vincent/blog/issues/16/events","html_url":"https://github.com/77Vincent/blog/issues/16","id":364801313,"node_id":"MDU6SXNzdWUzNjQ4MDEzMTM=","number":16,"title":"How \"this\" works in Javascript","user":{"login":"77Vincent","id":12905966,"node_id":"MDQ6VXNlcjEyOTA1OTY2","avatar_url":"https://avatars2.githubusercontent.com/u/12905966?v=4","gravatar_id":"","url":"https://api.github.com/users/77Vincent","html_url":"https://github.com/77Vincent","followers_url":"https://api.github.com/users/77Vincent/followers","following_url":"https://api.github.com/users/77Vincent/following{/other_user}","gists_url":"https://api.github.com/users/77Vincent/gists{/gist_id}","starred_url":"https://api.github.com/users/77Vincent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/77Vincent/subscriptions","organizations_url":"https://api.github.com/users/77Vincent/orgs","repos_url":"https://api.github.com/users/77Vincent/repos","events_url":"https://api.github.com/users/77Vincent/events{/privacy}","received_events_url":"https://api.github.com/users/77Vincent/received_events","type":"User","site_admin":false},"labels":[{"id":727746124,"node_id":"MDU6TGFiZWw3Mjc3NDYxMjQ=","url":"https://api.github.com/repos/77Vincent/blog/labels/Programming","name":"Programming","color":"ed9e15","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-09-28T09:01:19Z","updated_at":"2018-09-28T09:08:21Z","closed_at":null,"author_association":"OWNER","body":"In general, \"this\" depends on how the function is called.\r\n\r\n1.  When using the new key word to create an instance from a class, this refers to the newly created object, the instance.\r\n```js\r\nclass ClassExample {\r\n  constructor(name) {\r\n    this.name = name\r\n    console.log(this)\r\n  }\r\n}\r\n\r\nfunction ConstructorExample(name) {\r\n    this.name = name \r\n    console.log(this)\r\n}\r\n\r\nnew ClassExample('vincent')\r\n// -> ClassExample { name: 'vincent' }\r\n\r\nnew ConstructorExample('vincent')\r\n// -> ConstructorExample { name: 'vincent' }\r\n```\r\n\r\n2. If apply, call, or bind are used to call a function, \"this\" inside the function is the object that is passed in as the argument.\r\n```js\r\nfunction fn() {\r\n  console.log(this);\r\n}\r\nconst obj = {\r\n  value: 5\r\n};\r\nconst boundFn = fn.bind(obj);\r\n\r\nboundFn();     // -> { value: 5 }\r\nfn.call(obj);  // -> { value: 5 }\r\nfn.apply(obj); // -> { value: 5 }\r\n```\r\n\r\n3. When function is called as a method of an object, \"this\" is the object that the function is a property of.\r\n```js\r\nconst obj = {\r\n  value: 1,\r\n  method() {\r\n    console.log(this)\r\n  }\r\n}\r\nobj.method() // -> { value: 1, method: f }\r\n```\r\n\r\n4. If a function is invoked as a free function invocation, meaning it was invoked without any of the conditions presented above, \"this\" is the global object.\r\n```js\r\nfunction fn() {\r\n  console.log(this)\r\n}\r\n\r\nfn() // -> Window\r\n\r\nconst obj = {\r\n  method() {\r\n    console.log(this)\r\n  }\r\n}\r\n\r\nconst method = obj.method\r\nmethod() // -> Window\r\n```\r\n\r\n5. When using arrow function, it ignores all the rules above and receives the \"this\" value of its surrounding scope **at the time it's created**. This is called the \"lexical this\".\r\n```js\r\nconst obj = {\r\n  method() {\r\n    console.log(this)\r\n  },\r\n  arrowMethod: () => {\r\n    console.log(this)\r\n  },\r\n  createArrowFn() {\r\n    return () => console.log(this)\r\n  }\r\n}\r\n\r\nobj.method() // -> { fn: ƒ, arrowFn: ƒ, createArrowFn: f }\r\nobj.arrowMethod() // -> Window\r\n\r\n// call, apply, bind won't work as expected\r\nobj.arrowMethod.call(obj) // -> Window\r\nobj.arrowMethod.apply(obj) // -> Window\r\nconst method = obj.arrowMethod.bind(obj)\r\nmethod() // -> Window\r\n\r\n// The inner arrow function is created when the outer createArrowFn is called\r\n// that's the moment when \"this\" inside the arrow function gets set which is \"obj\"\r\n// because that is what the \"this\" is in the createArrowFn scope\r\nobj.createArrowFn()() // -> { fn: ƒ, arrowFn: ƒ, createArrowFn: f }\r\n``"},{"url":"https://api.github.com/repos/77Vincent/blog/issues/15","repository_url":"https://api.github.com/repos/77Vincent/blog","labels_url":"https://api.github.com/repos/77Vincent/blog/issues/15/labels{/name}","comments_url":"https://api.github.com/repos/77Vincent/blog/issues/15/comments","events_url":"https://api.github.com/repos/77Vincent/blog/issues/15/events","html_url":"https://github.com/77Vincent/blog/issues/15","id":344273830,"node_id":"MDU6SXNzdWUzNDQyNzM4MzA=","number":15,"title":"How Angular beats me","user":{"login":"77Vincent","id":12905966,"node_id":"MDQ6VXNlcjEyOTA1OTY2","avatar_url":"https://avatars2.githubusercontent.com/u/12905966?v=4","gravatar_id":"","url":"https://api.github.com/users/77Vincent","html_url":"https://github.com/77Vincent","followers_url":"https://api.github.com/users/77Vincent/followers","following_url":"https://api.github.com/users/77Vincent/following{/other_user}","gists_url":"https://api.github.com/users/77Vincent/gists{/gist_id}","starred_url":"https://api.github.com/users/77Vincent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/77Vincent/subscriptions","organizations_url":"https://api.github.com/users/77Vincent/orgs","repos_url":"https://api.github.com/users/77Vincent/repos","events_url":"https://api.github.com/users/77Vincent/events{/privacy}","received_events_url":"https://api.github.com/users/77Vincent/received_events","type":"User","site_admin":false},"labels":[{"id":727746124,"node_id":"MDU6TGFiZWw3Mjc3NDYxMjQ=","url":"https://api.github.com/repos/77Vincent/blog/labels/Programming","name":"Programming","color":"ed9e15","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-07-25T02:57:38Z","updated_at":"2018-09-28T09:22:09Z","closed_at":null,"author_association":"OWNER","body":"## Mysteriously complicated\r\n\r\n## Poor documentation\r\n\r\n## What statistics says"},{"url":"https://api.github.com/repos/77Vincent/blog/issues/11","repository_url":"https://api.github.com/repos/77Vincent/blog","labels_url":"https://api.github.com/repos/77Vincent/blog/issues/11/labels{/name}","comments_url":"https://api.github.com/repos/77Vincent/blog/issues/11/comments","events_url":"https://api.github.com/repos/77Vincent/blog/issues/11/events","html_url":"https://github.com/77Vincent/blog/issues/11","id":312402372,"node_id":"MDU6SXNzdWUzMTI0MDIzNzI=","number":11,"title":"How to solve these problems in Javascript","user":{"login":"77Vincent","id":12905966,"node_id":"MDQ6VXNlcjEyOTA1OTY2","avatar_url":"https://avatars2.githubusercontent.com/u/12905966?v=4","gravatar_id":"","url":"https://api.github.com/users/77Vincent","html_url":"https://github.com/77Vincent","followers_url":"https://api.github.com/users/77Vincent/followers","following_url":"https://api.github.com/users/77Vincent/following{/other_user}","gists_url":"https://api.github.com/users/77Vincent/gists{/gist_id}","starred_url":"https://api.github.com/users/77Vincent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/77Vincent/subscriptions","organizations_url":"https://api.github.com/users/77Vincent/orgs","repos_url":"https://api.github.com/users/77Vincent/repos","events_url":"https://api.github.com/users/77Vincent/events{/privacy}","received_events_url":"https://api.github.com/users/77Vincent/received_events","type":"User","site_admin":false},"labels":[{"id":727746124,"node_id":"MDU6TGFiZWw3Mjc3NDYxMjQ=","url":"https://api.github.com/repos/77Vincent/blog/labels/Programming","name":"Programming","color":"ed9e15","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2018-04-09T05:52:58Z","updated_at":"2018-11-27T02:14:55Z","closed_at":null,"author_association":"OWNER","body":"## <a name=\"random-number\"></a>Generate random number\r\nWith maximum and minimum.\r\n```js\r\n(min, max) => Math.random() * (max - min) + min\r\n```\r\nWith maximum and minimum and round the result into an integer.\r\n```js\r\n(min, max) => Math.floor(Math.random() * (max - min + 1)) + min\r\n```\r\n\r\n## <a name=\"array-concatenation\"></a>Array concatenation\r\nSpread operator, modify the target in place.\r\n```js\r\narray1.push(...array2)\r\n```\r\nUsing concat, a more functional approach.\r\n```js\r\nlet array3 = array1.concat(array2)\r\n```\r\n\r\n## <a name=\"remove-duplicate\"></a>Remove duplicates from array\r\n* Set + spread operator (Fastest)\r\n```js\r\n(array) => [...new Set(array)]\r\n```\r\n* for loop (Medium)\r\n```js\r\n(array) => {\r\n  let arr = []\r\n\r\n  for (let i = 0; i < array.length; i++) {\r\n    if (arr.indexOf(array[i]) === -1) {\r\n      arr.push(array[i])\r\n    }\r\n  }\r\n  return arr\r\n}\r\n```\r\n* filter (Slowest)\r\n```js\r\n(array) => array.filter((item, index) => index === array.indexOf(item))\r\n```\r\n\r\n\r\n## <a name=\"sorting\"></a>Sorting\r\n* Insertion sort\r\n```js\r\n(arr) => {\r\n  let len = arr.length\r\n  for (let j = 1; j < len; j++) {\r\n    let key = arr[j]\r\n    let i = j - 1\r\n\r\n    while (i >= 0 && arr[i] > key) {\r\n      arr[i + 1] = arr[i]\r\n      i--\r\n    }\r\n    arr[i + 1] = key\r\n  }\r\n\r\n  return arr\r\n}\r\n```\r\n* Bubble sort\r\n```js\r\n(arr) => {\r\n  let len = arr.length\r\n  for (let i = 0; i < len; i++) {\r\n    for (let j = 1; j <= i; j++) {\r\n      if (arr[j - 1] > arr[j]) {\r\n        let temp = arr[j - 1]\r\n        arr[j - 1] = arr[j]\r\n        arr[j] = temp\r\n      }\r\n    }\r\n  }\r\n  return arr\r\n}\r\n```"},{"url":"https://api.github.com/repos/77Vincent/blog/issues/7","repository_url":"https://api.github.com/repos/77Vincent/blog","labels_url":"https://api.github.com/repos/77Vincent/blog/issues/7/labels{/name}","comments_url":"https://api.github.com/repos/77Vincent/blog/issues/7/comments","events_url":"https://api.github.com/repos/77Vincent/blog/issues/7/events","html_url":"https://github.com/77Vincent/blog/issues/7","id":274438931,"node_id":"MDU6SXNzdWUyNzQ0Mzg5MzE=","number":7,"title":"How to implement Deep Clone in Javascript","user":{"login":"77Vincent","id":12905966,"node_id":"MDQ6VXNlcjEyOTA1OTY2","avatar_url":"https://avatars2.githubusercontent.com/u/12905966?v=4","gravatar_id":"","url":"https://api.github.com/users/77Vincent","html_url":"https://github.com/77Vincent","followers_url":"https://api.github.com/users/77Vincent/followers","following_url":"https://api.github.com/users/77Vincent/following{/other_user}","gists_url":"https://api.github.com/users/77Vincent/gists{/gist_id}","starred_url":"https://api.github.com/users/77Vincent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/77Vincent/subscriptions","organizations_url":"https://api.github.com/users/77Vincent/orgs","repos_url":"https://api.github.com/users/77Vincent/repos","events_url":"https://api.github.com/users/77Vincent/events{/privacy}","received_events_url":"https://api.github.com/users/77Vincent/received_events","type":"User","site_admin":false},"labels":[{"id":727746124,"node_id":"MDU6TGFiZWw3Mjc3NDYxMjQ=","url":"https://api.github.com/repos/77Vincent/blog/labels/Programming","name":"Programming","color":"ed9e15","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2017-11-16T08:58:24Z","updated_at":"2018-11-23T14:16:24Z","closed_at":null,"author_association":"OWNER","body":"## <a name=\"what-does-copy-mean-in-javascript\"></a>What does \"copy\" mean in Javascript?\r\nIn javascript, primitives are stored in individual memory space on every creation, so copying a primitive is dead simple and safe. Changes made to the copy will never affect the source one.\r\n```js\r\nconst source = 'Hello World' \r\nconst copy = source\r\n\r\ncopy = 'So long' \r\nconsole.log(source) // => 'Hello World'\r\n```\r\n\r\nBut when it comes to object type, simply assign an object to another variable does not truely copy the original one at all. Instead, the new one is only a reference to the original object, whatever changes made to either of them will affect the other one because fundamentally, they both refer to the same area of memory space where the object is stored.\r\n\r\n```js\r\nconst source = { a: 1 }\r\nconst copy = source\r\n\r\ncopy.a = 2\r\nconsole.log(source.a) // => 2\r\n```\r\n\r\n## <a name=\"shallow-clone-vs-deep-clone\"></a>Shallow clone VS Deep clone\r\nIn order to truly copy an object, there are two approaches to be distinguished from which are **Shalow clone** and **Deep clone**. Shallow clone only truly copies the first \"layer\", or at least, not all layers of the source object, as demonstrated below.\r\n```js\r\nconst source = {\r\n  a: 1,\r\n  b: { foo: 1 },\r\n}\r\nconst copy = Object.assign({}, source) // This makes a shallow copy\r\n\r\n// First layer of source object will be intact when modifying the copy\r\ncopy.a = 2\r\nconsole.log(source.a) // => 1\r\n\r\n// Second layer is still using reference\r\ncopy.b.foo = 2\r\nconsole.log(source.b.foo) // => 2\r\n```\r\n\r\nAs the name implied, deep clone means that the newly created object will be copied from the source object from bottom to top, whatever changes made to any layer of each one will not affect the other one as they are completely stored in two different area of memory space.\r\n```js\r\nconst source = {\r\n  a: 1,\r\n  b: { foo: 1 },\r\n}\r\nconst copy = deepClone(source)\r\n\r\ncopy.b.foo = 2\r\nconsole.log(source.b.foo) // => 1\r\n```\r\n\r\n\r\n## <a name=\"a-workable-implementation-for-deep-clone\"></a>A workable implementation for deep clone\r\nUsing recursion to go through the entire object, be sure to cover different types of object such as Object or Array, return the same type of value according to that of the input on each iteration, if the input is a primitive then just return the input as it is. For now I only covered Object and Array types which are mostly used in real applications but there are other iterable objects in Javascript like **Set**.\r\n\r\n```js\r\nconst deepClone = source => {\r\n  if (source === null || source === undefined) {\r\n    return source \r\n  } else if (source.constructor.name === 'Object') {\r\n    const clone = {}\r\n    for (let key in source) {\r\n      clone[key] = deepClone(source[key])\r\n    }\r\n    return clone\r\n  } else if (source.constructor.name === 'Array') {\r\n    return source.map(value => deepClone(value))\r\n  } else {\r\n    return source\r\n  }\r\n}\r\n```"},{"url":"https://api.github.com/repos/77Vincent/blog/issues/6","repository_url":"https://api.github.com/repos/77Vincent/blog","labels_url":"https://api.github.com/repos/77Vincent/blog/issues/6/labels{/name}","comments_url":"https://api.github.com/repos/77Vincent/blog/issues/6/comments","events_url":"https://api.github.com/repos/77Vincent/blog/issues/6/events","html_url":"https://github.com/77Vincent/blog/issues/6","id":273371959,"node_id":"MDU6SXNzdWUyNzMzNzE5NTk=","number":6,"title":"Git-Basics","user":{"login":"77Vincent","id":12905966,"node_id":"MDQ6VXNlcjEyOTA1OTY2","avatar_url":"https://avatars2.githubusercontent.com/u/12905966?v=4","gravatar_id":"","url":"https://api.github.com/users/77Vincent","html_url":"https://github.com/77Vincent","followers_url":"https://api.github.com/users/77Vincent/followers","following_url":"https://api.github.com/users/77Vincent/following{/other_user}","gists_url":"https://api.github.com/users/77Vincent/gists{/gist_id}","starred_url":"https://api.github.com/users/77Vincent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/77Vincent/subscriptions","organizations_url":"https://api.github.com/users/77Vincent/orgs","repos_url":"https://api.github.com/users/77Vincent/repos","events_url":"https://api.github.com/users/77Vincent/events{/privacy}","received_events_url":"https://api.github.com/users/77Vincent/received_events","type":"User","site_admin":false},"labels":[{"id":727746124,"node_id":"MDU6TGFiZWw3Mjc3NDYxMjQ=","url":"https://api.github.com/repos/77Vincent/blog/labels/Programming","name":"Programming","color":"ed9e15","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2017-11-13T10:04:34Z","updated_at":"2018-11-23T09:05:16Z","closed_at":null,"author_association":"OWNER","body":"## <a name=\"instruction\"></a>Instruction\r\n* This introduction has been simplified to be more clear and practical.\r\n* All operations are through command line only, but not webapp.\r\n* <parameter\\> is mandatory, [parameter] is optional. \r\n* Commands that manipulate certain files, should receive a selector which is either file name, directory name, or \".\" meaning select all; if no selector is given, it will manipulate all possible files by default.\r\n\r\n## <a name=\"add-commit\"></a>Add / Commit\r\n* All files are untrack when created, git doesn't know their existence, once after commit, they will be always tracked.\r\n* All changes including creation, modification and deletion, need to be added before commit.\r\n* Files that don't want to be tracked all the time, should be written into .gitignore.\r\n\r\n```bash\r\n# untrack / modified / deleted =====> added\r\ngit add <file name>\r\n\r\n# added =====> commited\r\ngit commit [file name] -m \"commit message\"\r\n```\r\n\r\n## <a name=\"push-pull\"></a>Push / Pull\r\n* These two brothers are used for sync between local and remote repository.\r\n* Origin is like a domain, refers to remote branch by default.\r\n\r\n```bash\r\n# local branch A =====> remote branch A\r\ngit push\r\n\r\n# local branch A <===== remote branch A\r\ngit pull\r\n\r\n# local branch A =====> specified branch\r\ngit push origin <branch name>\r\n\r\n# local branch A <===== specified branch\r\ngit pull origin <branch name>\r\n\r\n# Pull from the upstream repository\r\ngit pull upstream <branch name>\r\n# or\r\ngit pull upstream HEAD\r\n```\r\n\r\n## <a name=\"reset\"></a>Reset\r\n* Reset reverts files to a specific previous status, like \"undo\".\r\n* HEAD is like milestone in the history, HEAD moves forward when a commit is created.\r\n* HEAD~ refers to the last commit, HEAD~~ refers to the commit before last commit, and so forth. \r\n\r\n```bash\r\n# added =====> untrack / modified / deleted.\r\ngit reset [file name]\r\n\r\n# committed =====> added.\r\ngit reset [file name] --soft HEAD~\r\n\r\n# committed =====> modified / untrack / deleted.\r\ngit reset [file name] HEAD~\r\n\r\n# committed =====> initial status (cautious).\r\ngit reset [file name] --hard HEAD~\r\n```\r\n\r\n## <a name=\"checkout\"></a>Checkout\r\n* Checkout can manipulate both branches and files, use it very carefully when working with files.  \r\n```bash\r\n# Switch to another branch\r\ngit checkout <branch name>\r\n\r\n# Create a new branch and immediately switch to the branch\r\ngit checkout -b <new branch name>\r\n\r\n# Revert files (Cautious)\r\ngit checkout <file name>\r\n```\r\n\r\n## <a name=\"branch\"></a>Branch\r\n* Each branch has local and remote version.\r\n```bash\r\n# List local branches\r\ngit branch\r\n\r\n# List remote branches\r\ngit branch -r\r\n\r\n# List local and remote branches\r\ngit branch -a\r\n\r\n# Create local branch\r\ngit branch <branch name>\r\n\r\n# Delete local branch\r\ngit branch -d <branch name>\r\n\r\n# Push local branch to remote\r\ngit push -u origin <branch name>\r\n\r\n# Delete remote branch\r\ngit push -d origin <branch name>\r\n```\r\n\r\n## <a name=\"clean\"></a>Clean\r\n* To delete untracked files from repository\r\n* By default, it will only delete files unless given a directory\r\n* By default git will refuse to delete unless \"-f\" are given.\r\n```bash\r\n# Delete all files\r\ngit clean -f\r\n\r\n# Delete repository\r\ngit clean -f <directory name>\r\n\r\n# Only shows what would be done but without actually doing it.\r\ngit clean -d [whatever]\r\n```\r\n\r\n## <a name=\"log\"></a>Log\r\n* To see the history of all commits\r\n```bash\r\n# List full history\r\ngit log\r\n\r\n# List commits only made by a specified user\r\ngit log --author=username\r\n\r\n# List history with more details\r\ngit log --stat\r\n```\r\n\r\n## <a name=\"show\"></a>Show\r\n* To see full details of a commit\r\n```bash\r\n# Show details of the last commit\r\ngit show\r\n\r\n# Show details of a specific commit\r\ngit show <commit ID>\r\n```\r\n\r\n## <a name=\"remove-repository\"></a>Remote repository\r\n```bash\r\n# To see the current remote repository\r\ngit remote -v\r\n\r\n# To set the upstream\r\ngit remote add upstream <url of the remote upstream repository>\r\n```\r\n"},{"url":"https://api.github.com/repos/77Vincent/blog/issues/1","repository_url":"https://api.github.com/repos/77Vincent/blog","labels_url":"https://api.github.com/repos/77Vincent/blog/issues/1/labels{/name}","comments_url":"https://api.github.com/repos/77Vincent/blog/issues/1/comments","events_url":"https://api.github.com/repos/77Vincent/blog/issues/1/events","html_url":"https://github.com/77Vincent/blog/issues/1","id":267519393,"node_id":"MDU6SXNzdWUyNjc1MTkzOTM=","number":1,"title":"Javascript-Basics","user":{"login":"77Vincent","id":12905966,"node_id":"MDQ6VXNlcjEyOTA1OTY2","avatar_url":"https://avatars2.githubusercontent.com/u/12905966?v=4","gravatar_id":"","url":"https://api.github.com/users/77Vincent","html_url":"https://github.com/77Vincent","followers_url":"https://api.github.com/users/77Vincent/followers","following_url":"https://api.github.com/users/77Vincent/following{/other_user}","gists_url":"https://api.github.com/users/77Vincent/gists{/gist_id}","starred_url":"https://api.github.com/users/77Vincent/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/77Vincent/subscriptions","organizations_url":"https://api.github.com/users/77Vincent/orgs","repos_url":"https://api.github.com/users/77Vincent/repos","events_url":"https://api.github.com/users/77Vincent/events{/privacy}","received_events_url":"https://api.github.com/users/77Vincent/received_events","type":"User","site_admin":false},"labels":[{"id":727746124,"node_id":"MDU6TGFiZWw3Mjc3NDYxMjQ=","url":"https://api.github.com/repos/77Vincent/blog/labels/Programming","name":"Programming","color":"ed9e15","default":false}],"state":"open","locked":false,"assignee":null,"assignees":[],"milestone":null,"comments":0,"created_at":"2017-10-23T01:49:28Z","updated_at":"2018-11-27T02:23:42Z","closed_at":null,"author_association":"OWNER","body":"## <a name=\"data-type\"></a>Data types\r\nPrimitives\r\n```js\r\n1 // Number \r\n'foo' // String \r\ntrue // Boolean \r\nnull // Null \r\nundefined // Undefined \r\nSymbol() // Symbol (ES6)\r\n```\r\n\r\nObjects\r\n```js\r\n{} // Object\r\n[] // Array\r\nfunction fn() {} // Function\r\nnew Set([]) // Set (ES6)\r\n```\r\n\r\nPrimitives are equal if their values are equal.\r\n```js\r\n1 === 1 // true\r\n'foo' === 'foo' // true\r\ntrue === true // true\r\nnull === null // true\r\nundefined === undefined // true\r\n```\r\n\r\nObjects are not evaluated as equal even they appear to have the same value beacuse every object is an instance of the class \"Object\" which ocupies an individual area of memory space.\r\n```js\r\n{} === {} // false\r\n[] === [] // false\r\n(function fn() {}) === (function fn() {}) // false\r\n```\r\n\r\n## <a name=\"data-declaration\"></a>Variables declaration\r\nFor primitives：literal syntax (left side) vs using constructor without \"new\" keyword (right side) \r\n```js\r\n'foo' === String('foo') // true\r\n1 === Number(1) // true\r\ntrue === Number(true) // true\r\n```\r\n\r\nCreating primitives using constructor with \"new\" keyword will result in creating an object which is not a primitives anymore.\r\n```js\r\n'foo' === new String('foo') // false\r\n1 === new Number(1) // false\r\ntrue === new Boolean(true) // false\r\n```\r\n\r\n## <a name=\"boolean\"></a>Bollean\r\nThese values are falsy\r\n```js\r\n!!undefined // false\r\n!!null // false\r\n!!0 // false\r\n!!\"\" // false\r\n!!NaN // false\r\n```\r\nObjects are all truthy\r\n```js\r\n!!(function () {}) // true\r\n!!new Set() // true\r\n!![] // true\r\n!!{} // true\r\n```\r\n\r\nDo not use abstract equality check \"==\" because:\r\n```js\r\n'' == 0 // true\r\n0 == [] // true\r\n[] == '' // true\r\n\r\n'' == false // true\r\n0 == false // true\r\n[] == false // true\r\n```\r\n\r\n## <a name=\"number\"></a>Number\r\nisNaN\r\n```js\r\nisNaN('a') // true\r\nisNaN(NaN) // true\r\nisNaN({}) // true\r\nisNaN((function() {})) // true\r\nisNaN(undefined) // true\r\n\r\nisNaN('0') // false\r\nisNaN([]) // false\r\nisNaN(false) // false\r\nisNaN(true) // false\r\nisNaN(null) // false\r\n```\r\n\r\n## <a name=\"object\"></a>Object\r\nIterate an object using the traditional \"for in loop\", this will also iterate properties which lies in its prototype.\r\n```js\r\nfor (let key in obj) {\r\n  console.log(key)\r\n}\r\n```\r\n\r\nAn object is not an iterable and therefore can not be iterated using the \"for of loop\" because \"for of loop\" can only be applied to iterables.\r\n```js\r\nfor (let key of obj) {\r\n  console.log(key)\r\n}\r\n// Uncaught TypeError: obj is not iterable\r\n```\r\n\r\n## <a name=\"array\"></a>Array\r\nWays of checking if a piece of data is an array\r\n```js\r\nArray.isArray(data)\r\n\r\n// or\r\n\r\nObject.prototype.toString.call(data) === '[object Array]'\r\n\r\n// or\r\n\r\ndata.constructor.name === 'Array'\r\n```\r\n\r\nArray can also be given associative items which is like key-value pairs in object, but the key-value pair will always be the last item of the array, and won't be counted into the array's length. Only \"for in loop\" will iterate all the items including the associative items.\r\n```js\r\nlet arr = [1, 2, 3]\r\narr.foo = 1 // [1, 2, 3, foo: 1]\r\n\r\narr.length // 3\r\n\r\nfor (let key in arr) {\r\n  console.log(key)\r\n}\r\n// 1, 2, 3, foo\r\n\r\nfor (let key of arr) {\r\n  console.log(key)\r\n}\r\n// 1, 2, 3\r\n\r\narr.map((v) => {\r\n  console.log(v)\r\n})\r\n// 1, 2, 3\r\n```\r\n\r\n## <a name=\"function\"></a>Function\r\nFunction can be assigned properties just like any other object.\r\n```js\r\nfn.foo = 1\r\n```\r\nCan be iterated by the \"for in loop\"\r\n```js\r\nfor (key in fn) {\r\n  console.log(key)\r\n}\r\n// foo\r\n```\r\nThis is how to add static class properties and methods to the constructor.\r\n```js\r\nMyConstructor.prop = 1 // static class property\r\nMyConstructor.method = () => {} // static class method\r\n```\r\nUsing \"function\" keyword to create a function, hoisting will happen.\r\n```js\r\nfoo.name // \"foo\"\r\nfoo() // \"foo\"\r\n\r\nfunction foo () { return foo.name }\r\n```\r\nUsing named function expression to create a function.\r\n```js\r\nbar()\r\n// Uncaught ReferenceError: bar is not defined\r\n \r\nconst bar = function zoo () { return zoo.name }\r\n\r\nbar.name // \"zoo\"\r\nbar() // \"zoo\"\r\nzoo.name // Uncaught ReferenceError: zoo is not defined\r\n```\r\n\r\n\"Return\" can be omitted along with the curly brackets.\r\n```js\r\nconst fn = a => a * 2\r\n// is equal to\r\nconst fn = a => { return a * 2 }\r\n\r\n// But can not simply use \"return\" without curly brackets.\r\nconst fn = a => return a * 2\r\n// Unexpected token return\r\n```\r\n\r\n## <a name=\"constructor\"></a>Constructor \r\nJS里的类实质上是构造函数，用Pascal命名式\r\n```js\r\nfunction Counter () {\r\n  this.count = 0\r\n}\r\n```\r\n箭头函数不能用于构造函数，因为lexical this缘故\r\n```js\r\nconst Counter = () => {\r\n  this.count = 0\r\n}\r\nlet c = new Counter()\r\n// Uncaught TypeError: Counter is not a constructor\r\n```\r\n给实例添加方法，坏实践是每个实例都有自己的方法，增加程序开销\r\n```js\r\nconst Counter = function Counter () {\r\n  this.count = 0\r\n  this.increase = function () { this.count++ }\r\n}\r\n```\r\n好实践是通过原型链继承\r\n```js\r\nCounter.prototype.increase = function () { this.count++ }\r\n```\r\n\r\n## <a name=\"class\"></a>Class (ES2015+)\r\n申明式定义\r\n```js\r\nclass MyClass {  }\r\n\r\nMyClass.name // \"MyClass\"\r\n```\r\n表达式定义，同函数定义规则一样，类名只在内部有效\r\n```js\r\nconst A = class B {  }\r\n\r\nA.name // \"B\"\r\nB.name // ReferenceError: B is not defined\r\n```\r\n实例属性：放在constructor方法里\r\n```js\r\nclass MyClass {\r\n  constructor() {\r\n    this.a = 1\r\n  }\r\n}\r\n```\r\n实例方法：之间不用逗号分隔\r\n```js\r\nclass MyClass {\r\n  methodA() {}\r\n  methodB() {}\r\n}\r\n```\r\n类静态方法：使用static关键字\r\n```js\r\nclass MyClass {\r\n  static staticMethod() {}\r\n}\r\n```\r\n类静态属性：通过static + getter模拟\r\n```js\r\nclass MyClass {\r\n  static get staticProps() { return 'some props' }\r\n}\r\n```\r\n"}]